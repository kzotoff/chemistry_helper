***************************************************************************************************
*                                                                                                 *
*                                    JuliaCMS Valenok Edition                                     *
*                              manual, questions, answers and readme                              *
*                                                                                                 *
***************************************************************************************************

	* если вам лень читать всю эту муть, в конце есть раздел "что-как" с простыми инструкциями к основным действиям
	* кроме этого мануала, некоторые настройки описаны в файле /conf.php
	* если вдруг чего - пишите k.zotov@gmail.com


(1) Как устанавливается?

	* распаковать все файлы в папку на сервере.
	* настроить параметр RewriteBase в .htaccess в корневой папке - путь от корня сервера к корню CMS.
	* БД настраивать не надо - она находится в единственном файле, путь настраивается в conf.php


(2) Как работает?

	* вcя работа происходит через файл index.php, перенаправление делается через mod_rewrite
	* алгоритм предельно прост:
		* базовый шаблон (см. (100)) читается в строку
		* подключаются файлы модулей, с помощью include_once().
		* строка обрабабатывается с помощью модулей
			* сначала функции обработки ввода всех модулей
			* потом функции обработки шаблона
		* после того, как все модули отработали, производится очистка шаблона от служебных тегов, полученный результат возвращается веб-серверу.
	* в подключаемых модулях предусмотрены 4 типа функций (не считая необходимых для работы самого модуля):
		* обработка ввода ($_GET/$_POST)
		* основная функция - делать может что угодно, но обычно ищет в шаблоне определенные строки и заменяет их на какой-то свой HTML
			* для поиска и замены предусмотрен тег "<macro type="menu"></macro>". Допускается короткая форма (<macro type="menu" />, но
				если JQuery где-то ее встречает (например, при вызове редактора), то заменяет на длинный вариант.
		* функция, возвращающая контент админки
		* обработчик AJAX-вызовов
	* в модулях нежелательно использовать какой-либо код, не обернутый в функции. "Когда будет нужно, вас позовут". Исключение - define();
	* описание модулей и их "действующих" функций находится в файле modules.php (формат см. (101))
	* отдельная функция index.php - перенаправление AJAX-запросов в различные модули.
		* для включения режима достаточно в GET указать ajaxproxy=название-модуля, запрос будет перенаправлен в обработчик
			соответственного модуля, обработчик должен сам смотреть в $_GET и решать, что возвращать.
	* расположение каталогов для модулей, пользовательских страниц и прочая описано в lib/lib.php. "Из коробки" должно работать без всякой
		дополнительной настройки


(3) Административный модуль

	* два способа включить режим администрирования:
		* к адресной строке (неважно, какой раздел сайта открыт) дописать ?login
		* к адресной строке дописать ?search=login или просто сделать поиск по сайту на строку "login"

	* на сайте админка видна в нескольких местах:
		* основная панель прицепляется к самому началу страницы, до всего контента, это делает сам модуль администрирования
		* в некоторых местах появляются разные кнопки, которые добавляют сами модули, по своему разумению

	* у админки есть два режима:
		* просмотр страниц - обычный вид сайта, не считая полоски с кнопками сверху. В этом режиме можно
			* передвигаться по сайту, как обычно
			* редактировать странички
		* режим управления каким-либо модулем:
			* обычное содержимое заменяется на страницу управления модулем
			* для включения режима в запросе обыкновенно должны быть указаны как минимум два параметра:
				* action=manage - всегда. если его нет - включится стандартный режим
				* module=<modulaname> - название модуля согласно modules.php
			* если для модуля объявлены компоненты admin_css и admin_js, ссылки на них будут добавлены на страничку
			* admin_css и admin_js остальных модулей НЕ добавляются
			* содержимое должно возвращаться из функции, объявленной в модуле как ajax_manager.
				* только контент, без BODY

	* функция обработки ввода админки - в общем обработчике ввода модуля (input_parser).
	* предоставляется общая стилевая таблица для единообразного вида (modules/admin/admin.css)

(50) [menu] Модуль генерации меню

	* формирует меню в виде
		<ul>                                    <!-- общий контейнер меню -->
			<li id="alias">                     <!-- элемент меню         -->
				<a href="link">                 <!-- ссылка куда-то       -->
					<span>menu item</span>      <!-- название             -->
				</a>
				<ul>                            <!-- подменю, если есть   -->
					...
				</ul>
			</li>
			...                                 <!-- следующие пункты     -->
		</ul>
	* хранится в БД в таблице menu
	* в шаблон вставляется на место тега <macro type="menu" id="int menu_id" />
	* для настройки стилей используется файл menu.css.
		* Изначально настроено в виде горизонтального раскрывающегося меню.
		* Для применения стиля контейнеру, который будет содержать меню, нужно добавить класс "dropdownmenu":
	* пример применения:
		<div id="menu-container" class="dropdownmenu">
			<macro type="menu" />
		</div>
	* возможные настройки (modules/menu/conf.php):
		* MENU_LINK_TEMPLATE - шаблон для ссылок, которые будут вставлены в <A>
	* описание таблицы menu:
		* id - идентификатор
		* caption - название элемента
		* alias - аналог алиаса страницы. если встречается в запросе в виде p_id, то вместо контента кталогизатор вставляет список всех дочерних элементов
		* menu_id - идентификатор меню, которому принадлежит элемент
		* parent_id - родительский элемент, 0 для корневых
		* link - ссылка на следующий элемент (alias подменю или страницы)
		* style - стиль отдельного элемента или стилевая таблица для списка в каталоге
		* ordermark - порядок сортировки при выводе. для корректной работы должен быть уникальным в пределах таблицы
		* picture - картинка на элементе
		* text - поясняющий текст (помельче, чем caption)
		* hidden - если не 0 и не пусто, элемент не показывается по умолчанию
			* если нужно показать скрытый элемент, в вызове генератора надо поставить что-то вроде $options = array('hidden_color'=>'green')

	* описание таблицы menus: (вообще, тут больше заточки под каталогизатор)
		* id - идентификатор
		* alias - если этот алиас ловит "каталогизатор" (см чуть ниже), то вместо контента выводится верхний уровень меню
		* caption - название
		* css - зарезервирован под стили, не применен
		* template_group - файл с шаблоном HTML показа группы (элемент меню, содержащий подэлементы)
		* template_short - файл с шаблоном краткого описания "конечного предмета" (не группы)
			Если в отображаемом списке есть хотя бы одна группа, для показа должен использоваться template_group,
			а если только предметы - template_short.

	* альтернативная функция - каталогизатор
		* обрабатывает ввод, смотрит в $_GET['p_id']
		* если находится элемент меню с таким алиасом, строит список своих подэлементов и выводит вместо тега для контента
		* для успешного применения в файле modules.php модуль должен быть до модуля контента
		* можно добавлять каждому узлу свой CSS и картинку
		* шаблон для элемента списка ДОЛЖЕН быть указан в описании
			* шаблон - обычный html, с шаблончиками вида %caption% - заменятся на сооветственные поля из таблицы menu
			* поле picture будет дополнено префиксом CONTENT_IMAGES_LOCATION
		* если выводится верхний уровень, он весь будет обернут в еще один див с другим классом (modules/menu/conf.php/MENU_TOP_LEVEL_WRAPPER)
		* кроме того, если идет запрос к страничке, которая есть в где-то в меню, дописывает навигатор в тег <macro type="navigator" menu="алиас менюшки"/>


(51) [content] Модуль вывода основного содержимого страницы

	* вставляется по тегу <macro type="content" />
	* информацию хранит в БД, по умолчанию в таблице pages
	* распознает $_GET['p_id'], по значению этого параметра выбирается страница, которая будет выведена. (см. настройку alias ниже)
	* возможные настройки страницы:
		* alias      - самый главный параметр. Очень короткое односложное название на латинице (например, "mainpage"). По сути - идентификатор
		* title      - заголовок страницы. Если определен, тег title шаблона будет удален и добавлен уже с указанным текстом
		* meta       - содержание для тегов meta.
			* если просто строка - будет создан тег <meta name="keywords" content="...">
			* если нужно много меты, формат такой: (ATTR|VALUE|CONTENT)...(...) ..., на каждую будет создано по одному тегу
				вида <meta ATTR="VALUE" content="CONTENT" />. Между скобками может быть что угодно, это будет проигнорировано
				если ATTR пустой, будет name
				если CONTENT пустой, атрибута content не будет
			* если нужно ОЧЕНЬ много меты или хочется написать ее руками - можно просто вписать любые теги, они будут помещены
				перед закрывающим тегом </head>
				
		* custom_css - таблица стилей, если нужна. Лежать должна в userfiles/css
		* generator  - название функции, генерирующей контент, для случая с php-страничкой
		* filename   - файл с контентом, ищется в папке userfiles/pages
			* если расширение html, то делается попытка вырезать содержимое тега BODY. Если ничего нет (нет такого тега) - вставляется целиком
			* если расширение php, то делается следующее:
				* файл подключается с помощью include_once(filename)
				* вызывается функция, указанная в generator
				* результат, который вернула функция, вставляется на необходимое место
			* если расширение xml, содержимое обрабатывается с помощью XSL-трансформации, должен быть указан файл с трансформером

	* могут быть служебные страницы, которые используются другими модулями. Пример - service_feedback_failed от модуля feedback.
	* модуль понимает параметр запроса print (site/page?print), в таком случае использует не входной шаблон, а некоторый свой

(52) [news] Модуль новостей

	* по сути, просто надстройка над модулем контента, штучные новости создаются и редактируются оттуда, а сдесь просто
		маркируются как новости, добавляется дата и ссылка. Ссылка не обязательно должна вести на страницу
	* добавление новости происходит так:
		* создаем страничку с контентом новости через модуль content (admin/pages)
		* создаем новость, в качестве страницы указываем вновь созданную страницу, линк ставим либо на нее, либо куда-то еще
			* если линк не указан, проставится автоматом на страницу. Но только при создании - при редактировании не ставится
	* вызывается шаблончиком <macro type="news" count="СКОЛЬКО ГЕНЕРИРОВАТЬ" template="ШАБЛОН" stream="ПОТОК" />
		* генерируется указанное количество, иначе все
		* выбираются только новости, имеющие в поле streams значение из поля "ПОТОК" - удобно, если нужно сделать, например,
			какие-то новости в боковой колонке, а какие-то другие - на главной странице.
		* шаблоны лежат в modules/news/conf.php, имя шаблона будет выбрано NEWS_TEMPLATE_УКАЗАННЫЙШАБЛОН
			* основная ссылка новости должна быть помечена как class="news_main_link", чтобы ее можно было вырезать, если ссылки нет

(53) [redirect] Модуль-редиректор

	* удобен для формы вида SELECT+OK, где при клике на ОК должно происходить перенаправление
		на какую-то страницу, в зависимости от выбранного значения SELECT (то есть, если выбран
		первый вариант, перенаправить на FAQ, если второй - на форум, если третий - на саппорт)
	* понимает запросы вида /module=redirect & action=redirect & target=<target>
	* в зависимости от параметров, соответственно, редиректит куда надо
		* если action равно redirect, то просто сам на себя с алиасом, указанным в target, а там уж кто поймает


(54) [feedback] Модуль для обработки форм заказа на сайте

	* понимает запросы в виде следующего POST-запроса:
		* module=feedback
		* action=send
		* template=SOME_TEMPLATE_NAME
		* какие-то прочие поля, которые будут в форме
	* если в запросе модуль обнаруживает требуемую команду, то делает следующее:
		* читает файлик template_SOME_TEMPLATE_NAME.html
		* в теле файлика заменяет все вхождения виде %var_name% на соответственные значения параметра var_name их запроса.
			То есть, если в запросе будет указано "city_name=moscow", то скрипт найдет в шаблоне все строки "%city_name%"
			и заменит их на "moscow"
		* удаляет неиспользованные шаблончики %var_name%
		* полученную строку отправляет на почту согласно настроек (/conf.php, параметр FEEDBACK_ADDRESSES), в html формате
	* использует две служебные страницы - service_feedback_failed и service_feedback_ok для индикации статуса отправки сообщения

(55) [filemanager] Модуль для управления всякими файлами

	* контент не обрабатывает, виден только в админке
	* позволяет загружать вспомогательные файлы:
		* картинки для пользовательских страничек
		* файлы для скачивания посетителями (документация, софт, вот это все)
		* таблицы стилей (CSS)
		* скрипты (javascript)
		* XSLT-шаблоны
	* папки, с которыми умеет работать, определяются в lib/lib.php/$USERFILES_DIRS. По умолчанию собраны в кучку, но вообже может куда угодно
	* работает не просто, а очень просто - показывает список файлов в выбранной категории (а на деле, папке), и предлагает набор действий:
		* любой файл можно удалить
		* все, кроме картинок и файлов для скачивания - можно редактировать, там просто текст
		* в выбранную категорию можно загрузить файл с локального компьютера
	* максимальный размер файла определяется настройками PHP на сервере, обычно это 2 мегабайта. Все, что больше, пока только по FTP
	* во все папки, кроме files и trash, можно закачивать только файлы определенных типов (для секьюрности)
		* css - только *.css
		* js - *.js
		* images - *.jpg, *.png, *.gif, *.bmp
		* xsl - *.xsl, *.xml
		* special - *.html, *.css, *.js, кроме начинаюшихся с "jquery"


(56) [search] Модуль поиска

	* отлавливает параметр p_id=search в запросе, поэтому страница с таким алиасом отображена не будет
	* поиск производится в пользовательских страницах (и в новостях, соответственно)


(99) Различные полезняшки, которые основной модуль предоставляет подключаемым:

	* переменная $DB - уже подключенная база SQLite.
		* Пример использования:
			function some_func() {
				global $DB;                                // импортируем внешнюю переменную
				$DB->query('select field from table');     // используем для своих нужд
			}
		* Не следует делать $DB->close() - это лишит все последующие модули возможности пользоваться базой. База будет закрыта основным скриптом.


(100) Разное

  * минимальный набор для работы:
		/index.php      - файл, пропускающий через себя любой ввод и вывод
		/conf.php       - файл с настройками. Описание настроек там же
		/modules.php    - файл с описанием используемых модулей
		/securuty.php   - всякие процедурки для разграничения доступа
		/template.html  - файл с основным шаблоном страницы (шапка, разметка контейнера меню, подвал, разное)
		/jquery.js      - библиотека JQuery
		/jquery-ui.js   - библиотека JQueryUI
		/main.css       - основная таблицы стилей
		/jquery-ui.css  - стили для JQueryUI
		/.htaccess      - всякие полезные настройки перенаправления и ограничения доступа для apache
		/data/db.sqlite - база для хранения всей вспомогательной информации
		/data/404.html  - страница по умолчанию для сообщения 404
		/userfiles/     - папка для файлов, используемых плагинами (страницы, картинки, скрипты, таблицы стилей и пр.)
		/tinymce/       - скрипт для редактирования страниц
		/modules/       - тут лежат все модули
		/lib/*          - вспомогательные функции

	* в различных папочках могут быть файлы index.html и .htaccess - они нужны для ограничения доступа к содержимому папки напрямую из браузера.

(101) О файле modules.php

	* формат описания модуля:
	
TAG_TODO это место устарело

		$modules[module_name] = array(option_name => option_value));

		* обязательные опции:
			* main_filename - файл с основным кодом модуля
			* dir           - каталог с модулем в каталоге modules (см. константу MODULE_DIR)

		* возможные опции:
			* css           - таблица стилей, будет добавлена в раздел HEAD шаблона
			* js            - ссылка на файл с javascript, если он нужен для модуля
			* input_parser  - имя функции обработки ввода
			* content_func  - имя функции обработки шаблона
			* admin_func    - содержимое для админки (вызывается из админ-модуля)
			* admin_caption - текст для кнопки в админке
			* disabled      - обработка модуля будет пропущена
			* break_after   - обработка будет прекращена после этого модуля
			* ajax_manager  - функция для ответов на AJAX-запросы (возвращает произвольный контент, вызывается прокси-функцией из index.php)
			* admin_css     - таблица стилей для режима админки, вызывается только из модуля admin
			* admin_js      - скрипты для админки, вызывается только из модуля admin

			формат объявления функции в модуле (если она есть вообше):

			function module_content_parse($template) {
				...
				return $template;
			}

			на вход подается шаблон в текущем виде (возможно, уже обработанный другими модулями)
			на выходе - то, что получилось. Даже если изменений не производилось, вернуть строку надо.

		* пример:
			$modules['some_module'] = array(
				'css'           => 'style.css',
				'content_func'  => 'module_menu_content',
				'dir'           => 'menu',
				'main_filename' => 'func.php'
			));

	* порядок вызова модулей лежит в массиве $modules_apply_order. Модуль может быть вызван несколько раз.

(102) Коды ошибок, которые может вернуть скрипт:

	* модуль content
		CONTENT/001 - файл со страницей есть, но прочитать его не удалось
	* модуль feedback
		FEEDBACK/001 - если запрошенный щаблон прочитать не удалось, вместо него используется служебный
			шаблон template_error_detected.html. А вот если и он куда-то пропал, то посылается вот эта строка


(103) Соглашение об именовании (naming guide)

	* типовая структура модуля:
		* admin.css/admin.js - стиль и скрипт для админки
		* func.php - основной файл. Константы тоже здесь.
		* html.php - весь HTML, который возможно вынести из func.php
		* conf.php - файл с настройками
		* lib.php - вспомогательные функции, если мы не хотим, чтобы они мешались в основном файле
	* константы, определяемые модулем, имеют префикс MODULE_modulename_, например, MODULE_NEWS_MAIN_TEMPLATE
	* константы-регулярки, если не в модуле - REGEXP_xxxx
	* по умолчанию, везде, где нужен идентификатор, используется регэксп REGEXP_ALIAS. А именно,
		большие и маленькие латинские буквы, цифры, дефис, знак подчеркивания.


(104) Права пользователей

	* для разграничения доступа используется специальный файлик - security.php
	* всегда смотрит в $_POST/$_GET
		* если попадается параметр login, выводит логин-страницу, при условии, что пользователь еще не залогинен
		* если пришли параметры логина, проверяем, залогиниваем пользователя при успешной проверке
		* команда logout, аналогично, разлогинивает, очищает сессию и все такое
	* основная используемая функция - user_allowed_to_admin('some action')
		* возвращает true, если текущему пользователю (определяется переменной $_SESSION['CMS_AUTH_USER']) разрешено действие 'some action'


(150) Разные мысли

	* Во всех запросах, подразумевающих обработку модулем, рекомендуется всегда указывать два параметра - название модуля и функцию:
		./? module=menu & action=delete & item_id=10
		Нужно для того, чтобы обработку не сделал случайно другой модуль.

	* Все странички с контентом должны быть в кодировке utf-8 - иначе обваливается preg_replace при замене шаблончика на контент
	* при копипасте какого-то текста в контент в режиме редактирования, происходит не очень приятная вещь - редактор заменяет переносы
		строк на <br />, вместо того, чтобы делать их параграфами. Зачастую копипасту удобнее совать в режиме просмотра кода.
		
	* поскольку обработка ошибок 403 и 404 выводит на главную, если какого-то css не хватает, на каждый из них будет свой запрос, что приведет
		к повышенной нагрузке. Поэтому после всякой настройки (особенно modules.php) необходимо проверять загрузку страницы
		чем-то вроде dragonfly (в opera) или firebug (в firefox).

(200) Что-как (how-to)

	* как установить?
		* создать на хостинге папочку и туда скопировать необходимые файлы
		* настроить параметр RewriteBase в .htaccess в корневой папке - путь от корня сервера к корню CMS
		* настроить некоторые параметры в файле conf.php (в основном, почтовые адреса)

	* как попасть в админку?
		* site.name.com/?login
		* альтернативный способ - набрать в строке поиска (если она есть на странице) слово "login" и послать запрос на поиск

	* как поменять пароль админа?
		* жестко вписан в файл security.php, там и менять. Да, это не есть правильно. Как-нибудь допишу многопользовательский модуль.

	* как изменить основной дизайн страницы?
		* редактированием файла template.html, а также привязанных к нему CSS-файлов.
			это можно сделать из файл-менеджера (админка/files),в категории "special") или закачать готовый файл по FTP

	* что это за тег <macro>? в HTML его нет!
		* модули, обрабатывающие шаблон, реагируют на этот тег и вставляют туда свои фрагменты кода - контент, новости и прочее
		* неиспользованные теги по окончанию обработки уничтожаются

	* какие модули есть? как вызвать опреленный модуль?
		* на момент написания были доступны следующие модули:
			* content - вывод основного содержимого страницы. Звать с помошью <macro type="content" />
			* menu - выводит требуемое меню в виде UL/LI. Дальше обрабатывать CSS-ом. Звать <macro type="menu" />
			* news - список новостей. <macro type="news" />
			* redirect - просто обрабатывает строку запроса и может сделать редирект куда-нибудь
			* feedback - тоже не вставляет никакого контента, смотрит запрос на предмет наличия формы ввода, и отправляет ее на почту
			* filemanager - управление CSS, скриптами и прочими вспомогательными полезняшками

	* как добавить страницу?
		* на админ-панели нажать кнопку "pages", появится табличка со списком имеющихся страниц. Для создания - отдельная кнопка "add new".
		* у каждой страницы есть уникальный атрибут - alias, по нему модуль контента определяет, что нужно ее вывести. Т.е., если
			послать запрос http://my-site.com/cool-page, то при наличии страницы с алиасом cool-page, ее содержимое будет вставлено в шаблон.

	* а отредактировать?
		* в режиме админки сверху будет кнопка "edit this page"
		* при нажатии, будет показана та же страничка, но в форме редактирования
		* если текущая страничка не просто страничка, а хитрая (типа php-скрипта), будет выведено уведомление о возможном риске
		* если страничка, на самом деле - группа каталога, редактирование не будет вызывано.
		* картинки необходимо вставлять с путем относительно index.php (как правило, это userfiles/images/some_image.png)
		* ссылки на другие страницы или группы каталога - просто алиасы целевого объекта, без каких-либо подкаталогов и прочего мусора

	* а что с меню?
		* на админ-панели кнопка "menu"
		* меню может быть несколько
		* внешнюю ссылку пока можно только редиректором, дописывать руками его

	* как добавить новость?
		* с новостями хитрее. На самом деле это просто странички. Поэтому, добавление новости проходит в два шага:
			* создаем страничку с каким-то контентом или без оного
			* в админке (по кнопке "news") добавляем новость и ей указываем эту страничку. Или не указываем, а просто пишем ссылку куда-нибудь.

