














***************************************************************************************************
*                                                                                                 *
*                                         В Н И М А Н И Е                                         *
*                                                                                                 *
* лицам с неуравновешенной психикой, беременным женщинам, молодым людям до 18 лет, а также лицам, *
* страдающим заболеваниями нервной или сердечно-сосудистой системы читать далее не рекомендуется  *
*                                                                                                 *
***************************************************************************************************


























(i) не все доделки вынесены сюда, мелкие помечены спецовыми маркерами:
	TAG_TODO       : обычная мелкая доделка
	TAG_DOC        : момент надо отразить в документации
	TAG_CRAZY      : допиливать в первую очередь, ибо позорище или склад костылей
	TAG_TEST       : тут воткнуть тестирование какое-то
	TAG_EXPERIMENT : экспериментальный кусок, возможно, будет переписан

(ii)

===================================================================================================
 в мануал:
===================================================================================================
 
про unified-table (+ row-inline-button, actionboard)
alias в виде GUID автоматически ставится у элементов меню
XML меню умеет выделять элементы у которых алиас совпадает с текущим p_id
БД - проверку таблицы каментов, создание при отсутствии
про фидбэк написать, откуда там имена шаблонов берутся
что такое streams в новостях
про функцию хидеров X-JuliaCMS-Result-*
про то, почему админ-модуль на самом деле не совсем модуль	
про перенаправление после отправки в модуле feedback
о том, что скрипты и стили не добавляются сразу, а сливаются разом (в отличие от общей концепции "модуль изменяет шаблон")
про удаление вызова аплоадера (?upload) после разворачивания
о том, что при следующем вызове редактора обрезанные <p> опять появятся вокруг макросов
DB: реакция callAPI на разные data-button-action
DB: назначение параметра after в описании actions
content: ставить его перед меню, новостями и т.д., чтобы те могли обработать макросы в страницах
DB: class = datablock-fixed-frame
content:macro user-function
DB: data-no-context-menu="yes"
DB: macro type="db" id="..." checkbox="true"
TinyMCE: при инсталляции не забывать про переменные авторизации в плагинах minigallery и filelink

===================================================================================================
 моменты, которые надо отслеживать при проверке корректности настройки
===================================================================================================
значение по умолчанию у невидимых полей (в основном это касается ID-полей)


===================================================================================================
 доделки и баги
===================================================================================================

	LOGGING:
SQL-запросы в обертке


	ALL:
перенести все скрипты на jquery 1.11 (в основном, заменить .click( на .on('click', и обработчики AJAX-вызовов
выяснить про хрень с 6 animate + 1 callback (почему колбэк на последнем, а выполняется 6 раз)
всем классам воткнуть префиксы по названию модуля, встроенным - "jcms-"
из module/admin/admin.css вытащить стили отдельных админок в соответственные модули
придумать, что делать с тестированием всякой хрени типа log_this и XSLTransform
проверять: блокировка фона во время ajax-запросов
придумать, как определять константы внутри класса, но в другом файле (зачем?)
навести порядок с именами констант - либо спрятать внутрь модулей, либо префиксов навешать, если спрятать невозможно
во всех запросах переделать имена таблиц на константы либо настроечные значения (вроде сделано?)
дописать регэкспы контроля ввода в полях. сами регэкспы переделать на константы (для почты, текстов, номеров и прочее)
при поиске элемент анимируется заленым и потом белым. так вот, этот белый потом перебивает ховер на строке
алгоритм модулей переписать как в auth - шаблон один раз разбирается preg_match_all, а не поштучно preg_match


	CORE:
при удалении неиспользованных шаблонов писать в лог
почему mod_rewrite не редиректит на /new_site/text.txt при наличии /text.txt
сделать еще одну обертку - для результата PDOWrapper->query. Иначе нужно знать что применять - fetch или fetchAssoc, что негодно
в функции отправки письма (common/send_email) при прикладывании изображения как-то нужно понимать, относительный или абсолютный путь к картинке и с какого места начинать, если относительный
	либо: проверить, что все пути всегда начинаются от корня CMS-ки
логи почтарю приделать
PDOWrapper::datetimeToString - оптимизировать

	
	AUTH:
потестировать модуль (как?)
права доступа - нужно API
смена пароля пользователя - тоже нужно API


	FEEDBACK:
страницу, на которую пренаправляется в модуле feedback, вынести в конфиг
проверить работу модуля feedback (была замена ссылки на шаблон письма)
feedback - куда перенаправлять после отправки - из конфига
feedback - выводить попап о результатах отправки письма (?)


	DB:
реализовать пейджинг для режима XML-генератора
выбор формата Excel в настройки
(!!!) унифицировать сохранение и добавление записи	
(!!!) переписать алгоритм сохранения/добавления вот таким образом:
	1) проверка корректности ввода
	2) вызов внешних хелперов
	3) преобразование согласно описаниям полей (поля-списки и тд)
	4) простое сохранение
	5) опять хелперы
частичное редактирование: когда в форме редактирования не все поля, про остальные оно думает, что они пустые. Нужно сделать, чтобы они вообще не трогались
выверить список обязательных полей в CMS::$R['db_api_fields'], добавить умолчания
в диалоге указывать, создаем или редактируем, если редактируем - что именно
автодобавление модулем DB списка функций из user API (code SDFKLGHDFKLGHDFGJKLDFHSGKLDFHGFJKLGDFJG)
удалять комментарии при удалении объекта
вынести папку для хранения коммент-аттачей в настройку
контроль доступа к API
верхнее меню отчета тоже генерировать
при генерации датаблока сделать возможя ность указывать его ID вместо create_guid
дописать примеры XML для generateEditorialXML и generateCommentsXML
функция getFullFieldDefinition должна автоматически добавлять readonly в определенных ситуациях (например, если поле из присоединенной таблицы-подзапроса)
придумать, как юзерленд сможет навешивать свои функции на типовые операции типа добавления/удаления записи
сделать опцию в репорте - чтобы поисковый инпут генерировался с остальными кнопками (сверху таблицы) (пока что зашит в report.xsl)
в йоксель-репорте сделать заголовок нормальный (откуда-то и брать его надо)
J_DB_Helpers::getExcelLetter - бажная, не отрабатыват трехзначные названия
рассмотреть функционал direct-api, возможно, убрать (заменить на стандартный вызов). hint: JS FileAPI
сабмит формы по ентеру
привести в порядок коды возврата API (по ходу, где-то возвращается 404, где-то 200, продумать, как правильнее, и причесать)
проработать в скриптах ситуацию с несколькими датаблоками
внешний контейнер для установки размера датаблока: div.datablock-fixed-frame style="width: 1000px; height: 500px|auto"
если поле, обозначенное в репорте как id_field, не присутствует в выборке (массив fields), система дохнет
если в массиве fields есть синтетическое поле, не присутствующее в sql_insert селекте, тоже дохнет


	CONTENT:
сделать распознавание макроса [macro type="content" alias="alias" /] для показа определенной страницы
добавить функционал: настройку в странице, при которой она будет не помещаться на место макроса, а заменять весь контент
удаление служебных страниц (например, service_feedback_ok) - выводить пояснение
на подумать: страницы после генератора прогонять через модули на случай, если генератор создаст макрос
дописать про папку userfiles/php
переписать все на prepared
сделать как минимум два прохода модуля (сейчас последовательно ловится content, потом user-function), но нужен и обратный порядок
с опцией "генератор" проблема: файл странички обязательно должен быть и именно с расширением php. Будет html - генератор не будет задействован.


	REDIRECT:
ключи для неполного совпадения редактировать нельзя, только значения
редиректор - форму настройки сделать надо к ему


	MENU:
нужна возможность прилеплять target="_blank" к элементам меню
в генераторе меню тоже сделать функцию наподобие getFullFieldDefinition
module.menu.moveElementUp и moveElementDown - понять, нужно ли их объединять в одну
в страницах, которые генерируются модулем меню, сделать соответственное редактирование либо пояснение
реализовать возможность каждой группе в каталоге присваивать свой шаблон - сейчас сквозной для всего каталога
в админке сделать выделение скрытых элементов и узлов без страницы, действия и прочего (бесполезных, в общем)
переделать напрочь алгоритм построения дерева меню, чтобы не был привязан к порядку элементов в выборке

	
	SMS:
перенести ряд функций из модуля sms в userapi


	SEARCH:
сделать возможность получения поискового XML через запрос (легко, но нужно прикрутить авторизацию)


	BACKUP:
текстовое описание ошибки (щито?)


--------------------------------------------------------------------------------------------------------------------------------------------
	назначение различных тегов data-*
--------------------------------------------------------------------------------------------------------------------------------------------
типовой метод работы с формами:
	1) контент формы:
		оборачиваем в div data-form-container="some-form-name"
		ИЛИ
		оборачиваем в form data-form-name="some-form-name"
		
	2) кнопке сабмита добавляем атрибуты:   data-button-action="form-submit"  data-form-submit="some-form-name"

	3) скрипт обработки AJAX либо onload должен найти кнопку, на которой есть data-button-action="form-submit",
		на нее повесить сабмит формы, а именно: сначала ищем форму, указанную у кнопки в атрибуте data-form-submit,
		если она есть, сабмитим ее. Если нет, ищем любой вообще контейнер с атрибутом data-form-container, берем его
		значение, оборачиваем контейнер в форму, даем ей data-form-name и сабмитим ее.
	4) мысли:
		* диалоговые формы все делаем в два слоя - внешний становится диалогом, внутренний - оборачивается формой
		* блоки, не относящиеся непосредственно к данным формы (фильтраторы, кнопки, рисунки и тому подобная муть) - во внешнем контейнере
	

data-form-submit
	назначение
		обозначает форму, для которой будет сделан submit. Само наличие атрибута не значит, что будет вызван обработчик - это просто обозначение
	    для функции, развешивающей хендлеры. Сама форма должна быть снабжена атрибутом data-form-name
		
	где встречается
		кнопки для сабмита форм

data-form-name
	назначение
		идентификатор формы
	где встречается
		тег form

data-button-action
	назначение
		показывает функцию кнопки (form-submit, form-cancel, comment-delete)
	где встречается	
		на кнопках

data-form-container
	назначение
		индикатор контейнера, который надо обернуть в форму для сабмита. Нужен для того, чтобы можно было делать несколько вложенных
		в друг друга форм с разными сабмитами
	значение
		будет присвоено атрибуту data-form-name (см описание)
	где встречается
		любой контейнер (div, например)

data-comment-id
	назначение
		идентификатор комментария
	где встрачается
		форма комментариев (и она же, встроенная в форму редактирования)
		
data-meaning
	назначение
		общее назначение элемента
	где встречается
		везде
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	