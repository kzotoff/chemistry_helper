<?php //> Й <- UTF markclass J_Filemanager extends JuliaCMSModule {	/**	 *	 */	function requestParser($template) {		if (!user_allowed_to_admin('manage files')) {			return $template;		}		$module_name = 'filemanager';		// check if something to do		if ((@$_GET['module'] != $module_name) && (@$_POST['module'] != $module_name)) {			return $template;		}		// filter input		$input_filter = array(			'action'       => array('filter' => FILTER_VALIDATE_REGEXP, 'options' => array('regexp' => '~^(update_file|upload|delete)$~ui')),			'category'     => array('filter' => FILTER_VALIDATE_REGEXP, 'options' => array('regexp' => REGEXP_ALIAS)),			'filename'     => array('filter' => FILTER_VALIDATE_REGEXP, 'options' => array('regexp' => '~^(?!(\.\.|\|//|[a-zA-Zа-яА-Я0-9\s_\-\(\)]:)).*$~u')),			'new_filename' => array('filter' => FILTER_VALIDATE_REGEXP, 'options' => array('regexp' => '~^(?!(\.\.|\|//|[a-zA-Zа-яА-Я0-9\s_\-\(\)]:)).*$~u')),			'filecontent'  => array('filter' => FILTER_VALIDATE_REGEXP, 'options' => array('regexp' => '~.*~'))		);		$_INPUT = get_filtered_input($input_filter);		// prepare redirect		$redirect_target = './?module='.$module_name.'&action=manage&category='.$_INPUT['category'];		$redirect_status = false;		switch (get_array_value($_INPUT, 'action')) {			case 'upload':				for ($i = 0; $i < count($_FILES['files']['name']); $i++) {					// check extension against directory configuration, use only if matches					if (($dir = $this->getUserFolderParams($_FILES['files']['name'][$i], $_INPUT['category'])) != false) {						move_uploaded_file($_FILES['files']['tmp_name'][$i], iconv('utf-8', filesystem_encoding(), $dir['dir'].$_FILES['files']['name'][$i]));					}				}				$redirect_status = true;				break;			case 'delete':				if ($this->getUserFolderParams($_INPUT['filename']) != false) {					unlink($_INPUT['filename']);				}				$redirect_status = true;				break;			case 'update_file':				// check if filenames (old and new) are ok				if (					($this->getUserFolderParams($_INPUT['filename']    ) === false) ||					($this->getUserFolderParams($_INPUT['new_filename']) === false)				) {					popup_message_add('Расширение не подходит для этой папки', JCMS_MESSAGE_ERROR);					return $template;				}				// write contents, yeah				file_put_contents(iconv('utf-8', filesystem_encoding(), $_INPUT['filename']), $_INPUT['filecontent']);				// rename if requested				if ($_INPUT['filename'] != $_INPUT['new_filename']) {					rename($_INPUT['filename'], $_INPUT['new_filename']);				}				popup_message_add('Файл обновлен', JCMS_MESSAGE_OK);				$redirect_status = true;				break;		}		// check for redirect		if ($redirect_status) {			terminate('', 'Location: '.$redirect_target, 302);		}		return $template;	}	/**	 *	 */	function AJAXHandler() {		if (!user_allowed_to_admin('manage files')) {			terminate('Forbidden', '', 403);		}		// also suck something from config		$userfiles_dirs = $this->getDirectoriesDescription();		$response = 'bad request';		switch ($_GET['action']) {			case 'create_elem':				if (!isset($_GET['category']) || !isset(CMS::$R['USERFILES_DIRS'][$_GET['category']])) {					return 'bad category';				}				$category = $_GET['category'];				$folder_params = CMS::$R['USERFILES_DIRS'][$category];				if (!isset($folder_params['extensions'])) {					return 'not editable content';				}				$filename = $folder_params['dir'].create_guid().'.'.$folder_params['extensions'][0];				file_put_contents($filename, '');								$response = $this->createFileEditor($filename, $_GET['category']);				break;											case 'edit_elem':				// check input				if (!isset($_GET['file'])) {					return 'file not set';				}				$filename = $_GET['file'];				// check extension				$folder_params = $this->getUserFolderParams($filename);				if (!($alias = array_search($folder_params, $userfiles_dirs))) {					return 'bad extension';				}				// some directories are not editable								if (!isset($folder_params['extensions'])) {					return 'not editable content';				}								$response = $this->createFileEditor($filename, $alias);				break;		}		return $response;	}	/**	 * Creates simple file editor dialog	 *	 * @param string $filename file to edit	 * @param string $category file category according to CMS::$R['USERFILES_DIRS']	 * @return string HTML code	 */	private function createFileEditor($filename, $category) {		$content = file_get_contents($filename);		$xml = new DOMDocument('1.0', 'utf-8');		$xml->preserveWhiteSpace = true;		$xml->formatOutput = true;		$root = $xml->createElement('root');		$root->appendChild($xml->createElement('category'))->nodeValue = $category;		$root->appendChild($xml->createElement('filename'))->nodeValue = $filename;		$root->appendChild($xml->createElement('content'))->appendChild($xml->createCDATASection($content));		return XSLTransform($xml->saveXML($root), __DIR__.'/edit_form.xsl');			}	/**	 *	 */	function adminGenerator() {		$userfiles_dirs = $this->getDirectoriesDescription();		// default directory if not set - either "Main files" or just the first.		$r = array_keys($userfiles_dirs);		$category = in_array('special', $r) ? 'special' : $r[0];		if (isset($_GET['category']) && ($_GET['category'] > '')) {			$category = $_GET['category'];		}		// init		$xml = new DOMDocument('1.0', 'utf-8');		$xml->preserveWhiteSpace = true;		$xml->formatOutput = true;		$root = $xml->createElement('root');		$xml->appendChild($root);		// category - single for all files		$root->appendChild($xml->createElement('category'))->nodeValue = $category;		$root->appendChild($xml->createElement('full-path'))->nodeValue = $userfiles_dirs[$category]['dir'];		// directory list		$root->appendChild($directories_node = $xml->createElement('directories'));		foreach($userfiles_dirs as $alias => $dir) {			$directories_node->appendChild($dir_node = $xml->createElement('directory'));			if ($alias == $category) {				$dir_node->setAttribute('selected', 'selected');			}			$dir_node->appendChild($xml->createElement('caption'))->nodeValue = $dir['caption'];			$dir_node->appendChild($xml->createElement('alias'))->nodeValue = $alias;		}		// if folder selected and exists, output its files		if (isset($userfiles_dirs[$category])) {			$dir = $userfiles_dirs[$category];			if (file_exists($dir['dir']) && is_dir($dir['dir'])) {				$root->appendChild($filelist_node = $xml->createElement('files'));				$d = scandir($dir['dir']);				foreach ($d as $filename) {					$filename = iconv(filesystem_encoding(), 'utf-8', $filename);					if (preg_match('~^'.$dir['regexp_filename'].'$~ui', $filename) > 0) { // only matched files						$filelist_node->appendChild($file_node = $xml->createElement('file'));						$file_node->appendChild($xml->createElement('filename'))->nodeValue = $filename;						$file_node->appendChild($xml->createElement('path'))->nodeValue = $dir['dir'].$filename;					}				}			}		}		return XSLTransform($xml->saveXML($root), __DIR__.'/admin_form.xsl');	}	/**	 * Returns directory description for the filename, based on directory's regular expression	 *	 * Each directory description contains regular expression for filename checking, any manageable files	 * in the directory must match this expression. This function checks all description and returns	 * the first one with matched expression. if $test_only_this is set, only one desription will be tested.	 * For more information, look at lib/common.php/$USERFILES_DIRS.	 *	 * @param string $filename filename to choose directory for	 * @param mixed $test_only_this force test only one directory and return false if not mached	 * @return array|false directory description if anything found, false if not	 */	private function getUserFolderParams($filename, $test_only_this = false) {		$userfiles_dirs = $this->getDirectoriesDescription();		foreach ($userfiles_dirs as $type => $dir) {			// full regexp may be either full path or only filename			// full-path version needed for editing and deleting			$dir_path_regexp_mod = preg_replace('~([./\\\\])~', '\\\$1', $dir['dir']);			$regexp = "~^(|{$dir_path_regexp_mod}){$dir['regexp_filename']}$~ui";			if (				(preg_match($regexp, $filename)) &&				(($test_only_this === false) || ($test_only_this == $type))			) {				return $dir;			}		}		return false;	}	/**	 * Creates list of manageable directories - from common list in common.php and module config	 *	 * @return array directories definition structure, refer lib/common.php for the sample	 */	private function getDirectoriesDescription() {		// modules can add their custom dirs to main list so init them all		foreach (CMS::$R['modules_apply_order'] as $module) {			module_init($module);		}		// get list as it is defined in CMS		$userfiles_dirs = CMS::$R['USERFILES_DIRS'];		// merge module's config-defined list		if (isset($this->CONFIG['directories']) && is_array($this->CONFIG['directories'])) {			$userfiles_dirs = array_merge($userfiles_dirs, $this->CONFIG['directories']);		}		// remove empties		foreach ($userfiles_dirs as $dir_index => $struct) {			if (($struct == false) || (!isset($struct['caption'])) || ($struct['caption'] == '')) {				unset($userfiles_dirs[$dir_index]);			}		}		// ok, ready		return $userfiles_dirs;	}}?>