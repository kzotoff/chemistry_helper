$(function() {	$('.tablesorter').tablesorter();	$('[data-button-action="admin-module-settings"]').on('click', function() { moduleAdmin.showModuleSettings($(this)); });	$('[data-button-action="admin-module-help"]').on('click', function() { moduleAdmin.showHelp($(this)); });	$('[data-button-action="admin-module-cms-config"]').on('click', function() {				// this will force admin module to retrieve main CMS settings instead of module's		var CMSSettingsPhantom = $(this).closest('.admin-box-main').attr('data-cms-settings-phantom');		moduleAdmin.showModuleSettings($(this), CMSSettingsPhantom);	});});moduleAdmin = {};moduleAdmin.showHelp = function(sourceButton, forceModule) {	var helpURL = 'doc/help.php' + ($(sourceButton).attr('data-help-path') ? '?path='+$(sourceButton).attr('data-help-path') : '');	$('<iframe id="help_container" src="'+helpURL+'"></iframe>').dialog({		modal : true,		width : parseInt($(window).width() * 0.8),		height: parseInt($(window).height() * 0.8),		close : function() { $('#help_container').remove(); },		open  : function() { $('#help_container').css({ 'width' : parseInt($(window).width() * 0.8)+'px' }); },		title : 'Справка'	});};// we are strongly need this method as it seems that this is the only war to close dialog from its internal iframemoduleAdmin.closeHelp = function() {	$('#help_container').dialog('close');}moduleAdmin.showModuleSettings = function(sourceButton, forceModule) {	var activeModule;	if (typeof(forceModule) == 'undefined') {		activeModule = $(sourceButton).closest('.admin-box-main').attr('data-active-module');	} else {		activeModule = forceModule;	}	var URL = './?ajaxproxy=admin&action=get_settings&target='+activeModule;	backgroundLock();	$.get(URL)		.always(function() {			backgroundRelease();		})		.done(function(result) {			$('<div id="admin-module-settings-dialog" data-target-module="'+activeModule+'"></div>')				.html(result)				.dialog({					width  : 'auto',					height : 650,					title  : 'Конфигурация модуля',					modal  : true,					close  : function() { $('#admin-module-settings-dialog').remove(); }				});				moduleAdmin.applyHandlers();				$('.settings-form').first().focus();				$('.settings-form input[data-path-hash]').first().focus();		})		.fail(function(status, textStatus) {			alert(				'Error occured:\r\n'+       //				status.status+' '+          // HTTP code				status.statusText+'\r\n'+   // canonical code text (i.e., "Not found" for 404)				status.responseText+' '     // text part of result			);			return false;		});};moduleAdmin.applyHandlers = function() {	$('.settings-form .input-container>*').on('change', function() {		$(this).addClass('modified');	});	$('.settings-form .input-container>*').on('focus', function() {		moduleAdmin.addButtonsHere($(this));	});};moduleAdmin.hideButtons = function() {	$('#settings_box_button_save').remove();	$('#settings_box_button_revert').remove();};moduleAdmin.addButtonsHere = function(target) {	moduleAdmin.hideButtons();	if (!$(target).attr('data-path-hash')) {		return;	}	$('<span id="settings_box_button_save" class="btn btn-sm  btn-primary glyphicon glyphicon-ok"></span>')		.insertAfter($(target))		.on('click', function() { moduleAdmin.saveData(target); });	$('<span id="settings_box_button_revert" class="btn btn-sm btn-primary glyphicon glyphicon-repeat"></span>')		.insertAfter($(target))		.on('click', function() { moduleAdmin.revertData(target); });};moduleAdmin.revertData = function(target) {	$(target)		.val($(target).attr('data-initial-value'))		.removeClass('modified');	};moduleAdmin.saveData = function(target) {	moduleAdmin.hideButtons();	if (!$(target).attr('data-path-hash')) {		return;	}	$(target).addClass('input-waiter').attr('disabled', 'disabled');	var hash  = $(target).attr('data-path-hash');	var value = encodeURIComponent($(target).val());	var module = $('#admin-module-settings-dialog').attr('data-target-module');	var URL = './?ajaxproxy=admin&target='+module+'&action=save_setting&hash='+hash+'&value='+value;	$.get(URL)		.done(function(result) {			if ($.trim(result) == 'OK') {				$(target).removeClass('input-waiter').removeClass('modified').removeAttr('disabled');				$(target).attr('data-initial-value', $(target).val());				$(target)					.animate({ 'background-color' : '#0f0'}, 'normal')					.animate({ 'background-color' : '#fff'}, 'normal');				popupMessageShow({ message : 'Setting saved', popupClass : 'popup-ok'});			} else {				popupMessageShow({ message : 'Error saving: '+result, popupClass : 'popup-error'});			}		})		.fail(function(status, textStatus) {			var message =				'Error occured:<br />'+       //				status.status+' '+            // HTTP code				status.statusText+'<br />'+   // canonical code text (i.e., "Not found")				status.responseText;          // text part of result			popupMessageShow({ message : message, popupClass : 'popup-error'});		});};