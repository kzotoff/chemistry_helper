-------------------------------------------------------------------------------
                   AUTH : Простой модуль для контроля доступа
-------------------------------------------------------------------------------

Краткое описание:
	Модуль дает возможность ограничивать доступ к содержимому сайта.


Использование:
	Если требуется
	* в config.json ставим параметр "require_login" равным true.
	* желательно в конфигурации самой CMS сделать запуск этого модуля первым

	При успешном входе логин пользователя записывается в переменную сессии с
	именем, заданным параметром конфигурации "session_username"

	Модуль при обработке шаблона проверяет, залогинился ли кто-то уже, если
	нет - заменяет весь контент странички на форму ввода пароля и обработка
	прекращается, до остальных модулей очередь даже не	доходит.

	Получив логин-пароль, модуль связывается с БД и проверяет соответствие
	имеющимся данным. Если есть	совпадение - в сессию записывается логин
	пользователя.

	Пароль шифруется, защищается солью. (про соль можно почитать, например,
	здесь: https://ru.wikipedia.org/wiki/Соль_(криптография) ). Алгоритм
	шифрования следующий:
		от соли вычисляется хеш MD5,
		приписывается сзади к паролю
		от полученной строки вычисляется хеш SHA1
		полученный хеш записывается в базу


Настройка:
	по состоянию на версию 1.0 (2015-08-18) - только через настроечный файл


API:
	Запросы можно посылать как POST, так и GET

	Все запросы должны содержать
		module    : auth
	или
		ajaxproxy : auth

	Остальные параметры:

	* Логин:
		action    : login
		username  : [логин]
		password  : [пароль]
	аналогично, приходит "OK" или "NO" с описанием

	* Логаут:
		action    : logout
	ответ всегда "OK"

	* Смена пароля:
		action    : chpass
		password  : [старый_пароль]
		password1 : [новый_пароль]
		password2 : [новый_пароль_еще_раз]
	в ответ приходит "OK" при успехе, "NO" при неудаче. Дополнительно следует
	текстовое описание ошибки

	* Запрос страницы смены пароля (в режиме ajaxproxy выдает только HTML-код
	формы смены, без BODY и прочих оберток, а также небольшой фрагмент
	javascript)
		action    : change_password


Дополнительные public-функции в модуле:
	нет


Управление с помошью шаблонов:
	<macro type="auth" mode="MODE" />
	или
	[macro type="auth" mode="MODE" /]

	где MODE - одно из:
		login_message - будет заменен на HTML с сообщением об успешном или
			            неуспешном входе


Константы и дополнительные файлы:
	REGEXP_USERNAME      : регулярное выражение для валидации логина
	HTML_MESSAGE_SUCCESS : HTML, который возвращается при успешном логине
	HTML_MESSAGE_FAIL    : HTML, который возвращается при неуспешном логине
	login.html           : форма входа
	chpass.html          : форма смены пароля


Пример настроек:

	<config>
		
		<!--
			требовать ли ввода логина-пароля. если true, будет проверять
			наличие залогиненного пользователя, при отсутствии - показывать
			форму входа
		-->
		<require_login>true</require_login>

		<!--
			название переменной в сессии, где будет храниться логин. В данном
			случае это будет $_SESSION['module_auth_user_logged']
		-->
		<session_username>module_auth_user_logged</session_username>

		<!--
			параметры подключения к БД - драйвер, хост (файл для SQLite),
			логин, пароль, название базы
		-->
		<database>
			<server_driver>sqlite<server_driver>
			<server_host>data/db.sqlite<server_host>
			<server_login><server_login>
			<server_password><server_password>
			<server_db_name><server_db_name>
		</database>

		<!--
			соль для хеша, если не используется поле (см. ниже)
			если меняем соль, все имеющиеся хеши, не использующие собственную,
			становятся невалидными
		-->
		<secret_default>sdfvjklhjB%&8GKBN789n)*(&(!;--23nu1<secret_default>

		<!--
			таблица со списком пользователей
		-->
		<table>clients</table>

		<!--
			название поля, в котором хранятся логины
		-->
		<login_field>login</login_field>

		<!--
			поле для соли, если есть. если нет - пустой или убираем
		-->
		<secret_field>secret</secret_field>

		<!--
			поле для хранения хеша
		-->
		<md5_field>md5</md5_field>

	</config>


Полезные советы:


Известные баги:
